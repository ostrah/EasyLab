const mongoose = require('mongoose');

const connectionSchema = new mongoose.Schema({
  groupId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Group',
    required: true
  },
  devA: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Device',
    required: true
  },
  ifaceA: {
    type: String,
    required: true
  },
  devB: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Device',
    required: true
  },
  ifaceB: {
    type: String,
    required: true
  },
  cableType: {
    type: String,
    enum: ['UTP', 'CROSS', 'SERIAL'],
    default: 'UTP'
  },
  status: {
    type: String,
    enum: ['up', 'down'],
    default: 'up'
  }
}, {
  timestamps: true
});

// –ò–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ –≥—Ä—É–ø–ø–µ
connectionSchema.index({ groupId: 1 });

// –ò–Ω–¥–µ–∫—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
connectionSchema.index(
  { 
    groupId: 1, 
    devA: 1, 
    ifaceA: 1, 
    devB: 1, 
    ifaceB: 1 
  }, 
  { unique: true }
);

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
connectionSchema.pre('save', function(next) {
  console.log('üíæ Saving connection:', {
    groupId: this.groupId,
    devA: this.devA,
    ifaceA: this.ifaceA,
    devB: this.devB,
    ifaceB: this.ifaceB,
    cableType: this.cableType,
    status: this.status
  });
  next();
});

connectionSchema.pre('findOneAndUpdate', function(next) {
  console.log('üîÑ Updating connection:', {
    id: this._conditions._id,
    update: this._update
  });
  next();
});

connectionSchema.pre('findOneAndDelete', function(next) {
  console.log('üóëÔ∏è Deleting connection:', this._conditions._id);
  next();
});

// –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
connectionSchema.methods.validateConnection = async function() {
  console.log('üîç Validating connection:', {
    groupId: this.groupId,
    devA: this.devA,
    ifaceA: this.ifaceA,
    devB: this.devB,
    ifaceB: this.ifaceB
  });

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
  const Device = mongoose.model('Device');
  const [deviceA, deviceB] = await Promise.all([
    Device.findById(this.devA),
    Device.findById(this.devB)
  ]);

  if (!deviceA || !deviceB) {
    console.log('‚ùå One or both devices not found');
    return false;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
  const hasInterfaceA = deviceA.interfaces.some(iface => iface.name === this.ifaceA);
  const hasInterfaceB = deviceB.interfaces.some(iface => iface.name === this.ifaceB);

  if (!hasInterfaceA || !hasInterfaceB) {
    console.log('‚ùå One or both interfaces not found');
    return false;
  }

  console.log('‚úÖ Connection validation successful');
  return true;
};

module.exports = mongoose.model('Connection', connectionSchema); 